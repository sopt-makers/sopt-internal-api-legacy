// Generated by ts-to-zod
import { z } from "zod";

import { isIsoDate } from "@/util/regex";

export const kyselyMigrationSchema = z.object({
  name: z.string(),
  timestamp: z.string(),
});

export const kyselyMigrationLockSchema = z.object({
  id: z.string(),
  is_locked: z.number().optional(),
});

export const linksSchema = z.object({
  id: z.number().optional(),
  project_id: z.number(),
  title: z.string(),
  url: z.string(),
});

export const projectUsersSchema = z.object({
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  is_team_member: z.boolean().optional().nullable(),
  project_id: z.number(),
  role: z.string().optional().nullable(),
  user_id: z.number(),
});

export const projectsSchema = z.object({
  category: z.string(),
  detail: z.string(),
  // NOTE: postgresql 의 timestamp 자료형을 sql-ts가 Date 형으로 인식한다.
  // 여기서는 ISO string을 저장할 것이므로 형을 변환시켜주자
  end_at: z.string().refine(isIsoDate).nullable().optional(),
  generation: z.number().optional().nullable(),
  id: z.number().optional(),
  images: z.array(z.string()).optional().nullable(),
  is_available: z.boolean().optional().nullable(),
  is_founding: z.boolean().optional().nullable(),
  name: z.string(),
  service_type: z.array(z.string()),
  start_at: z.string().refine(isIsoDate),
  summary: z.string(),
  thumbnail_image: z.string(),
});

export const usersSchema = z.object({
  auth_user_id: z.number(),
  id: z.number().optional(),
});
